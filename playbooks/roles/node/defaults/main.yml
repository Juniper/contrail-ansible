---
cloud_orchestrator: openstack
# os_release - operaing system release code
# ubuntu 14.04 - ubuntu14.04, ubuntu 16.04 - ubuntu16.04, centos 7.1 - centos7.1
valid_os_release: [ubuntu14.04, ubuntu16.04, centos7.1, centos7.2, redhat7, centos7]
os_release: ubuntu14.04
lb_image: >-
  {%- if docker_registry is defined and load_contrail_lb_image is not defined -%}{{ docker_registry }}/contrail-lb-{{ os_release }}:{{ contrail_version }}
  {%- else %}contrail-lb-{{ os_release }}:{{ contrail_version }}{%- endif %}
controller_image: >-
  {%- if docker_registry is defined and load_contrail_controller_image is not defined -%}{{ docker_registry }}/contrail-controller-{{ os_release }}:{{ contrail_version }}
  {%- else %}contrail-controller-{{ os_release }}:{{ contrail_version }}{%- endif %}
analytics_image: >-
  {%- if docker_registry is defined and load_contrail_analytics_image is not defined -%}{{docker_registry}}/contrail-analytics-{{ os_release }}:{{ contrail_version }}
  {%- else %}contrail-analytics-{{ os_release }}:{{ contrail_version }}{%- endif %}
analyticsdb_image: >-
  {%- if docker_registry is defined and load_contrail_analyticsdb_image is not defined -%}{{docker_registry}}/contrail-analyticsdb-{{ os_release }}:{{ contrail_version }}
  {%- else %}contrail-analyticsdb-{{ os_release }}:{{ contrail_version }}{%- endif %}
agent_image: >-
  {%- if docker_registry is defined and load_contrail_agent_image is not defined -%}{{docker_registry}}/contrail-agent-{{ os_release }}:{{ contrail_version }}
  {%- else %}contrail-agent-{{ os_release }}:{{ contrail_version }}{%- endif %}
vrouter_compiler_image_centos7: >-
  {%- if docker_registry is defined and load_contrail_vrouter_module_compiler_centos7_image is not defined -%}{{docker_registry}}/contrail-vrouter-compiler-centos7:{{ contrail_version }}
  {%- else %}contrail-vrouter-compiler-centos7:{{ contrail_version }}{%- endif %}
contrail_kube_manager_image: >-
  {%- if docker_registry is defined and load_contrail_kube_manager_image is not defined -%}{{docker_registry}}/contrail-kube-manager-{{ os_release }}:{{ contrail_version }}
  {%- else %}contrail-kube-manager-{{ os_release }}:{{ contrail_version }}{%- endif %}
contrail_mesos_manager_image: >-
  {%- if docker_registry is defined and load_contrail_mesos_manager_image is not defined -%}{{docker_registry}}/contrail-mesos-manager-{{ os_release }}:{{ contrail_version }}
  {%- else %}contrail-mesos-manager-{{ os_release }}:{{ contrail_version }}{%- endif %}
contrail_repo_ubuntu_image: >-
  {%- if docker_registry is defined and load_contrail_repo_ubuntu_image is not defined -%}{{docker_registry}}/contrail-repo-{{ os_release }}:{{ contrail_version }}
  {%- else %}contrail-repo-{{ os_release }}:{{ contrail_version }}{%- endif %}
contrail_repo_centos_image: >-
  {%- if docker_registry is defined and load_contrail_repo_centos_image is not defined -%}{{docker_registry}}/contrail-repo-centos7:{{ contrail_version }}
  {%- else %}contrail-repo-centos7:{{ contrail_version }}{%- endif %}
contrail_repo_redhat_image: >-
  {%- if docker_registry is defined and load_contrail_repo_redhat_image is not defined -%}{{docker_registry}}/contrail-repo-{{os_release}}:{{ contrail_version }}
  {%- else %}contrail-repo-{{os_release}}:{{ contrail_version }}{%- endif %}
storage_ceph_controller_image: >-
  {%- if docker_registry is defined and load_storage_ceph_controller_image is not defined -%}{{ docker_registry }}/contrail-ceph-controller-{{ os_release }}:{{ contrail_version }}
  {%- else %}contrail-ceph-controller-{{ os_release }}:{{ contrail_version }}{%- endif %}


always_pull_image: false

docker_py_version: 1.9.0

container_agent_extra_env: {}
external_vrouter_compile: false
kernel_source_packages: []

# docker_image_load_path: In case of no docker_registry, load the images from tar files under this path
docker_image_load_path: "{{playbook_dir}}/container_images"
contrail_lb_image_archive: "contrail-lb-{{ os_release }}-{{ contrail_version }}.tar.gz"
contrail_controller_image_archive: "contrail-controller-{{ os_release }}-{{ contrail_version }}.tar.gz"
contrail_analytics_image_archive: "contrail-analytics-{{ os_release }}-{{ contrail_version }}.tar.gz"
contrail_analyticsdb_image_archive: "contrail-analyticsdb-{{ os_release }}-{{ contrail_version }}.tar.gz"
contrail_agent_image_archive: "contrail-agent-{{ os_release }}-{{ contrail_version }}.tar.gz"
vrouter_module_compiler_centos7_image_archive: "contrail-vrouter-compiler-centos7-{{ contrail_version }}.tar.gz"
contrail_kube_manager_image_archive: "contrail-kube-manager-{{ os_release }}-{{ contrail_version }}.tar.gz"
contrail_mesos_manager_image_archive: "contrail-mesos-manager-{{ os_release }}-{{ contrail_version }}.tar.gz"
contrail_repo_ubuntu_image_archive: "contrail-repo-ubuntu-{{ contrail_version }}.tar.gz"
contrail_repo_centos_image_archive: "contrail-repo-centos7-{{ contrail_version }}.tar.gz"
storage_ceph_controller_image_archive: "contrail-ceph-controller-{{ os_release }}-{{ contrail_version }}.tar.gz"
contrailctl_config_directory: /etc/contrailctl
contrail_apt_repo_port: 1567
contrail_yum_repo_port: "{{ contrail_apt_repo_port }}"
contrail_repo_ip: "{{ hostvars[groups['contrail-repo'][0]].get('ansible_default_ipv4', {}).get('address','') | default('') if 'contrail-repo' in groups else ''}}"
contrail_apt_repo: "{{ contrail_repo_ip | ternary('http://' + contrail_repo_ip + ':' + contrail_apt_repo_port|string, '') if 'contrail-repo' in groups and ansible_os_family == 'Debian' else '' }}"
contrail_yum_repo: "{{ contrail_repo_ip | ternary('http://' + contrail_repo_ip + ':' + contrail_yum_repo_port|string, '') if 'contrail-repo' in groups and ansible_os_family == 'RedHat' else '' }}"

# contrailctl_config_mode should be either
#  configure - let ansible write contrailctl config entries using inifile module
#  copy - ansible skip writnig confg entries, but expect the config files in specific location and it just deploy those files
contrailctl_config_mode: configure

controller_ip: "{{ controller_list[0] | default('') }}"
analytics_ip: "{{ analytics_list[0] | default('') }}"

# Volumes to be mounted to the containers
contrail_container_volumes:
  - "{{ contrailctl_config_directory }}:/etc/contrailctl/"

contrail_controller_log_volumes:
  - "/var/log/contrail/controller:/var/log/contrail"
  - "/var/log/zookeeper:/var/log/zookeeper"

contrail_controller_data_volumes:
  - "{{ configdb_data_dir }}:/var/lib/cassandra"
  - "/var/lib/zookeeper:/var/lib/zookeeper"
contrail_analytics_log_volumes:
  - "/var/log/contrail/analytics:/var/log/contrail"
contrail_analyticsdb_log_volumes:
  - "/var/log/contrail/analyticsdb:/var/log/contrail"
contrail_analyticsdb_db_volumes:
    - "{{ analyticsdb_data_dir }}:/var/lib/cassandra"

contrail_agent_log_volumes:
  - "/var/log/contrail/agent:/var/log/contrail"
contrail_agent_kernel_volumes:
  - "/lib/modules:/lib/modules"
  - "/usr/src:/usr/src"
  - "/var/lib/contrail:/var/lib/contrail"

contrail_controller_volumes: "{{ contrail_container_volumes + contrail_controller_log_volumes + contrail_controller_data_volumes }}"
contrail_analytics_volumes: "{{ contrail_container_volumes + contrail_analytics_log_volumes }}"
contrail_analyticsdb_volumes: "{{ contrail_container_volumes + contrail_analyticsdb_log_volumes + contrail_analyticsdb_db_volumes }}"
contrail_agent_volumes: "{{ contrail_container_volumes + contrail_agent_log_volumes + contrail_agent_kernel_volumes }}"

# In case of openshift, /etc/origin need to be mounted to the kube_manager container
#  which contain certs to connect with openshift master
openshift_cert_volumes:
  - "/etc/origin:/etc/origin"

kube_manager_container_volumes: "{{ contrail_container_volumes + openshift_cert_volumes if cloud_orchestrator == 'openshift' else contrail_container_volumes }}"

vrouter_physical_interface: >-
  {#- set interface of ctrl_data_network if passed -#}
  {%- if ctrl_data_ip is defined -%}
    {%- for iface in ansible_interfaces if hostvars[inventory_hostname]['ansible_' + iface | regex_replace('-', '_')].get('ipv4',{}).get('address', None) == ctrl_data_ip -%}
      {{ iface }}
    {%- endfor -%}
  {%- elif ctrl_data_network is defined -%}
    {%- set ip_in_ctrl_data_network = ansible_all_ipv4_addresses | ipaddr( ctrl_data_network ) -%}
    {%- if ip_in_ctrl_data_network | count > 0 -%}
      {#- Iterate all interfaces on the host and findout the interface that have the IP address-#}
      {%- for iface in ansible_interfaces if hostvars[inventory_hostname]['ansible_' + iface | regex_replace('-', '_')].get('ipv4',{}).get('address', None) == ip_in_ctrl_data_network |first -%}
        {{ iface }}
      {%- endfor -%}
    {#- No ip found on host from the network ctrl_data_network-#}
    {%- else -%}{{ ansible_default_ipv4.interface }}{%- endif -%}
  {#- set interface with default gateway -#}
  {%- else -%}{{ ansible_default_ipv4.interface }}{%- endif -%}

config_nodes: []
config_server_list_derived: []
config_ip: "{{ controller_list[0] | default('') }}"

# contrail-cni for mesos and contrail-kub-cni for others
contrail_cni_package_name: "{{ 'contrail-cni' if cloud_orchestrator == 'mesos' else 'contrail-k8s-cni' }}"

container_image_load_timeout: 300
docker_py_pkg_install_method: package

# SSL Cert directoy and paths
ssl_certs_src_dir: ""
ssl_certs_supplied: "{{ true if ssl_certs_src_dir else false }}"
ssl_certs_dir: "/etc/contrailctl/ssl"
ssl_cert_key_path: "{{ ssl_certs_dir }}/server-privkey.pem"
ssl_cert_path: "{{ ssl_certs_dir }}/server.pem"
ssl_ca_cert_path: "{{ ssl_certs_dir }}/ca-cert.pem"
ssl_ca_cert_key_path: "{{ ssl_certs_dir }}/ca-cert-privkey.pem"

# Sandesh SSL flags
sandesh_ssl_enable: false
introspect_ssl_enable: false

# Volume persistance
analyticsdb_data_dir: /var/lib/analyticsdb
configdb_data_dir: /var/lib/configdb

# Well known port defaults.
vrouter_agent_port: 9091
# nested_mode is to define whether it is nested mode kubernetes setup or not
nested_mode: false

# ceph related default
ceph_rest_api_port: 5005
api_server_port: 8082
configdb_port: 9161
keystone_admin_port: 35357
rabbitmq_port: 5672

# Private/Linklocad IP's allocated for controllers.
controller_ll_ip_list: []
