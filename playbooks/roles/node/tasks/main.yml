---
- name: fail in case of invalid os_release
  fail: msg="os_release should be one of {{ valid_os_release }}"
  when: "os_release not in valid_os_release"

# For nodes relying on a repo container host repository list is setup after installing
# docker-py to avoid trying to install docker-py via a container that is not up
# yet
- include: "{{ docker_py_pkg_install_method }}.yml"
  when:
    - docker_required == true
    - "'kubernetes-contrail-controllers' not in group_names"
    - "'kubernetes-contrail-analytics' not in group_names"

- include: "repo/{{ ansible_os_family }}.yml"
  tags: [repo]
  when:
    - "'contrail-repo' in groups"
    - "'kubernetes-contrail-controllers' not in group_names"
    - "'kubernetes-contrail-analytics' not in group_names"

- include: host.yml
  tags: [always]
  when:
    - "'contrail-repo' in groups"
    - "'kubernetes-contrail-controllers' not in group_names"
    - "'kubernetes-contrail-analytics' not in group_names"

# Intermediate dictionary necessary to derive the final analytics_list. This
# dictionary will contain the ip address of each host in  the contrail-analytics
# group that falls within the range specified by ctrl_data_network. For example,
# when the inventory contains: 
# [contrail-analytics] 
# 10.1.1.1 
# 10.1.1.2 ctrl_data_ip=11.1.1.2
# 10.1.1.3 ctrl_data_ip=11.1.1.3
# [all:vars]
# ctrl_data_network=192.168.1.0/24
#
# then assuming 10.1.1.1 contains another interface with 192.168.1.1 and the
# 10.1.1.2 host has only one other interface containing the 11.1.1.0/24 IP address
# specified above and 10.1.1.3 contains 192.168.1.3 in another interface, 
# the analytics_dict dictionary will contain:
#  {
#      "10.1.1.1":"192.168.1.1",
#      "10.1.1.2":"10.1.1.2",
#      "10.1.1.3":"192.168.1.3"
#  }
- name: Create analytics_list - step 1 (analytics_dict)
  set_fact:
      analytics_dict: "{{ analytics_dict|default({}) |\
          combine( {item: (hostvars[item]['ansible_all_ipv4_addresses'] |\
          ipaddr( ctrl_data_network ) | count != 0) |\
          ternary(hostvars[item]['ansible_all_ipv4_addresses'] |\
          ipaddr( ctrl_data_network ) | first, item)} ) }}"
  with_items:
      - "{{ analytics_group }}"
  when: ctrl_data_network is defined and analytics_list is not defined

# Uses the analytics_dict dict created above and creates the final list
# using the ctrl_data_ip defined per host using the logic below:
# 1. if the host (in [contrail-analytics] group) has ctrl_data_ip specified, 
#    that ip will be used (even if it has an IP address that falls within the
#    ctrl_data_network range).
# 2. if not and ctrl_data_network is defined, the IP address falling within that
#    network on the host will be used (the analytics_dict dict will be
#    used for getting this for the host).
# 3. If it does not have a relevant IP address in that range, then the IP
#    address specified in the [contrail-analytics] group will be used. 
# Using the logic above, the example given above will result in:
# analytics_list: [ 192.168.1.1, 11.1.1.2, 11.1.1.3 ]
- name: Create analytics_list - step 2 (when ctrl_data_network is defined)
  set_fact:
    analytics_list_tmp: "{{ analytics_list_tmp | default([]) + \
                         [hostvars[item].get('ctrl_data_ip', \
                         analytics_dict.get(item, item))] }}"
    analytics_hostname_list_tmp: "{{ analytics_hostname_list_tmp | default([]) }} + \
                          [ '{{ hostvars[item]['ansible_hostname'] }}' ]"
  with_items: "{{ analytics_group }}"
  when: ctrl_data_network is defined and analytics_list is not defined

- name: Create analytics_list - step 3 (with ctrl_data_ip if defined)
  set_fact:
    analytics_list_tmp: "{{ analytics_list_tmp | default([]) + \
                         [hostvars[item].get('ctrl_data_ip', item)] }}"
    analytics_hostname_list_tmp: "{{ analytics_hostname_list_tmp | default([]) }} + \
                          [ '{{ hostvars[item]['ansible_hostname'] }}' ]"
  with_items: "{{ analytics_group }}"
  when: ctrl_data_network is not defined and analytics_list is not defined

- name: Create analytics_list - step 4 (Assign from tmp if not defined)
  set_fact:
      analytics_list: "{{ analytics_list_tmp | default([]) }}"
      analytics_hostname_list: "{{ analytics_hostname_list_tmp | default([]) }}"
  when: analytics_list is not defined

# Create analyticsdb_list - start
- name: Create analyticsdb_list - step 1 (analyticsdb_dict)
  set_fact:
    analyticsdb_dict: "{{ analyticsdb_dict|default({}) | \
        combine( {item: (hostvars[item]['ansible_all_ipv4_addresses'] | \
        ipaddr( ctrl_data_network ) | count != 0) | \
        ternary(hostvars[item]['ansible_all_ipv4_addresses'] | \
        ipaddr( ctrl_data_network ) | first, item)} ) }}"
  with_items:
      - "{{ analyticsdb_group }}"
  when: ctrl_data_network is defined and analyticsdb_list is not defined

- name: Create analyticsdb_list - step 2 (when ctrl_data_network is defined)
  set_fact:
    analyticsdb_list_tmp: "{{ analyticsdb_list_tmp | default([]) + \
                           [hostvars[item].get('ctrl_data_ip', item)] }}"
    analyticsdb_hostname_list_tmp: "{{ analyticsdb_hostname_list_tmp | default([]) }} + \
                          [ '{{ hostvars[item]['ansible_hostname'] }}' ]"
  with_items: "{{ analyticsdb_group }}"
  when: ctrl_data_network is not defined and analyticsdb_list is not defined

- name: Create analyticsdb_list - step 3 (with ctrl_data_ip if defined)
  set_fact:
    analyticsdb_list_tmp: "{{ analyticsdb_list_tmp | default([]) + \
                           [hostvars[item].get('ctrl_data_ip', \
                           analyticsdb_dict.get(item, item))] }}"
    analyticsdb_hostname_list_tmp: "{{ analyticsdb_hostname_list_tmp | default([]) }} + \
                          [ '{{ hostvars[item]['ansible_hostname'] }}' ]"
  with_items: "{{ analyticsdb_group }}"
  when: ctrl_data_network is defined and analyticsdb_list is not defined

- name: Create analyticsdb_list - step 4 (Assign from tmp if not defined)
  set_fact:
      analyticsdb_list: "{{ analyticsdb_list_tmp | default([]) }}"
      analyticsdb_hostname_list: "{{ analyticsdb_hostname_list_tmp | default([]) }}"
  when: analyticsdb_list is not defined


# Create controller_list
- name: Create controller_list - step 1 (controller_dict)
  set_fact:
    controller_dict: "{{ controller_dict|default({}) | combine( {item: \
                      (hostvars[item]['ansible_all_ipv4_addresses'] | \
                      ipaddr( ctrl_data_network ) | count != 0) | \
                      ternary(hostvars[item]['ansible_all_ipv4_addresses'] | \
                      ipaddr( ctrl_data_network ) | first, item)} ) }}"
  with_items:
      - "{{ controller_group }}"
  when: ctrl_data_network is defined and controller_list is undefined

- name: Create controller_list - step 2 (when ctrl_data_network is defined)
  set_fact:
    controller_list_tmp: "{{ controller_list_tmp | default([]) + \
                      [hostvars[item].get('ctrl_data_ip', item)] }}"
    controller_hostname_list_tmp: "{{ controller_hostname_list_tmp | \
                      default([]) }} + \
                      [ '{{ hostvars[item]['ansible_hostname'] }}' ]"
  with_items: "{{ controller_group }}"
  when: ctrl_data_network is not defined and controller_list is not defined

- name: Create controller_list - step 3 (with ctrl_data_ip if defined)
  set_fact:
    controller_list_tmp: "{{ controller_list_tmp | default([]) + \
                          [hostvars[item].get('ctrl_data_ip', \
                          controller_dict.get(item, item))] }}"
    controller_hostname_list_tmp: "{{ controller_hostname_list_tmp | \
                          default([]) }} + \
                          [ '{{ hostvars[item]['ansible_hostname'] }}' ]"
  with_items: "{{ controller_group }}"
  when: ctrl_data_network is defined and controller_list is not defined

- name: Create controller_list - step 4 (Assign from tmp if not defined)
  set_fact:
      controller_list: "{{ controller_list_tmp | default([]) }}"
      controller_hostname_list: "{{ controller_hostname_list_tmp|default([]) }}"
  when: controller_list is not defined

# Create compute_list
- name: Create compute_list - step 1 (compute_dict)
  set_fact:
    compute_dict: "{{ compute_dict|default({}) | combine( {item: \
                   (hostvars[item]['ansible_all_ipv4_addresses'] | \
                   ipaddr( ctrl_data_network ) | count != 0) | \
                   ternary(hostvars[item]['ansible_all_ipv4_addresses'] | \
                   ipaddr( ctrl_data_network ) | first, item)} ) }}"
  with_items:
      - "{{ compute_group }}"
  when: ctrl_data_network is defined and compute_list is not defined

- name: Create compute_list - step 2 (when ctrl_data_network is defined)
  set_fact:
    compute_list_tmp: "{{ compute_list_tmp | default([]) + \
                       [hostvars[item].get('ctrl_data_ip', item)] }}"
    compute_hostname_list_tmp: "{{ compute_hostname_list_tmp | default([]) }} + \
                          [ '{{ hostvars[item]['ansible_hostname'] }}' ]"
  with_items: "{{ compute_group }}"
  when: ctrl_data_network is not defined and compute_list is not defined

- name: Create compute_list - step 3 (with ctrl_data_ip if defined)
  set_fact:
    compute_list_tmp: "{{ compute_list_tmp | default([]) + \
                       [hostvars[item].get('ctrl_data_ip', \
                       compute_dict.get(item, item))] }}"
    compute_hostname_list_tmp: "{{ compute_hostname_list_tmp | default([]) }} + \
                       [ '{{ hostvars[item]['ansible_hostname'] }}' ]"
  with_items: "{{ compute_group }}"
  when: ctrl_data_network is defined and compute_list is not defined

- name: Create compute_list - step 4 (Assign from tmp if not defined)
  set_fact:
      compute_list: "{{ compute_list_tmp | default([]) }}"
      compute_hostname_list: "{{ compute_hostname_list_tmp | default([]) }}"

- name: Create a dict mapping analytics hostnames to analytics IP addresses
  set_fact:
      analytics_ip_hostname_dict: "{{ analytics_ip_hostname_dict | default({}) | combine( {item.0: item.1} ) }}"
  with_together:
    - "{{ analytics_list }}"
    - "{{ analytics_hostname_list }}"

- name: Create a dict mapping compute analyticsdb to analyticsdb IP addresses
  set_fact:
      analyticsdb_ip_hostname_dict: "{{ analyticsdb_ip_hostname_dict | default({}) | combine( {item.0: item.1} ) }}"
  with_together:
    - "{{ analyticsdb_list }}"
    - "{{ analyticsdb_hostname_list }}"

- name: Create a dict mapping compute hostnames to compute IP addresses
  set_fact:
      compute_ip_hostname_dict: "{{ compute_ip_hostname_dict | default({}) | combine( {item.0: item.1} ) }}"
  with_together:
    - "{{ compute_list }}"
    - "{{ compute_hostname_list }}"

- name: Create a dict mapping compute ctrl_ip to compute management IP addresses
  set_fact:
      compute_ctrl_ip_mgmt_ip_dict: "{{ compute_ctrl_ip_mgmt_ip_dict | default({}) | combine( {item.0: item.1} ) }}"
  with_together:
    - "{{ compute_list }}"
    - "{{ compute_group }}"

- name: Create a dict mapping controller hostnames to controller IP addresses
  set_fact:
      controller_ip_hostname_dict: "{{ controller_ip_hostname_dict | \
          default({}) | combine( {item.0: item.1} ) }}"
  with_together:
    - "{{ controller_list }}"
    - "{{ controller_hostname_list }}"

- name: Create config_server_list_derived
  set_fact:
      config_server_list_derived: "{{config_server_list_derived + \
          [hostvars[item].get('ctrl_data_ip', controller_dict.get(item, item))]\
          if 'config' in hostvars[item].get('controller_components', []) \
          else config_server_list_derived}}"
  with_items: "{{ controller_group }}"
  when: ctrl_data_network is defined

- name: Create config_server_list_derived when ctrl_data_network is not defined
  set_fact:
      config_server_list_derived: "{{config_server_list_derived + \
          [hostvars[item].get('ctrl_data_ip', item)] \
          if 'config' in hostvars[item].get('controller_components', []) \
          else config_server_list_derived}}"
  with_items: "{{ controller_group }}"
  when: ctrl_data_network is not defined

# Create ceph-controller list
- name: Create ceph_controller_list - step 1 (ceph_controller_dict)
  set_fact:
    ceph_controller_dict: "{{ ceph_controller_dict|default({}) | combine( \
                      {item: (hostvars[item]['ansible_all_ipv4_addresses'] | \
                      ipaddr( ctrl_data_network ) | count != 0) | \
                      ternary(hostvars[item]['ansible_all_ipv4_addresses'] | \
                      ipaddr( ctrl_data_network ) | first, item)} ) }}"
  with_items:
      - "{{ ceph_controller_group }}"
  when: ctrl_data_network is defined and ceph_controller_list is undefined

- debug:
    msg:
      - "hostname test"
      - "hostname {{ hostvars[item]['ansible_hostname'] }}"
  with_items: "{{ ceph_controller_group }}"

- name: Create ceph_controller_list - step 2 (when ctrl_data_network is defined)
  set_fact:
    ceph_controller_list_tmp: "{{ ceph_controller_list_tmp | default([]) + \
                      [hostvars[item].get('ctrl_data_ip', item)] }}"
    ceph_hostname_list_tmp: "{{ ceph_hostname_list_tmp | default([]) }} + \
                          [ '{{ hostvars[item]['ansible_hostname'] }}-storage' ]"
  with_items: "{{ ceph_controller_group }}"
  when: ctrl_data_network is not defined and ceph_controller_list is not defined

- name: Create ceph_controller_list - step 3 (with ctrl_data_ip if defined)
  set_fact:
    ceph_controller_list_tmp: "{{ ceph_controller_list_tmp | default([]) + \
                          [hostvars[item].get('ctrl_data_ip', \
                          ceph_controller_dict.get(item, item))] }}"
    ceph_hostname_list_tmp: "{{ ceph_hostname_list_tmp | default([]) }} + \
                          [ '{{ hostvars[item]['ansible_hostname'] }}-storage' ]"
  with_items: "{{ ceph_controller_group }}"
  when: ctrl_data_network is defined and ceph_controller_list is not defined

- name: Create ceph_controller_list - step 4 (Assign from tmp if not defined)
  set_fact:
      ceph_controller_list: "{{ ceph_controller_list_tmp | default([]) }}"
      ceph_hostname_list: "{{ ceph_hostname_list_tmp | default([]) }}"
  when: ceph_controller_list is not defined

- name: set ceph-rest-api port
  set_fact:
    ceph_rest_api_port: 5006
  when: "'contrail-lb' in group_names"

- name: set enable_stats_daemon port
  set_fact:
    enable_stats_daemon : false
  when: "'contrail-compute' in group_names"

- name: Enable web-ui storage feature if ceph is configured - step 5.1
  set_fact:
      webui_storage_enable: true
  when: storage_ceph_config is defined

- name: Disable web-ui storage feature if ceph is not configured - step 5.2
  set_fact:
      webui_storage_enable: false
  when: storage_ceph_config is not defined

- include: lb.yml
  tags: [container.lb, lb]
  when: "'contrail-lb' in group_names"

- include: controller.yml
  tags: [container.controller, controller]
  when: "'contrail-controllers' in group_names and not nested_mode"

- include: analyticsdb.yml
  tags: [container.analyicsdb, analyticsdb]
  when: "'contrail-analyticsdb' in group_names and not nested_mode"

- include: analytics.yml
  tags: [container.analytics, analytics]
  when: "'contrail-analytics' in group_names and not nested_mode"

- include: kube_manager_nested.yml
  when: nested_mode

- include: kube_manager_link_local.yml
  when: "nested_mode and 'kubernetes-contrail-controllers' in group_names"

- include: kube_manager.yml
  tags: [container.kube_manager, kube_manager]
  when: "'contrail-kubernetes' in group_names and cloud_orchestrator in ['kubernetes', 'openshift']"

- include: "agent.yml"
  tags: [container.agent, agent]
  when: "'contrail-compute' in group_names and contrail_compute_mode == 'container' and not nested_mode"

# For kubernetes and openshift, agent will install cni file to the node
- include: kube_cni.yml
  tags: [container.kube_cni, kube_cni]
  when: "'contrail-compute' in group_names and (cloud_orchestrator in ['mesos','kubernetes'])"

- include: mesos_manager.yml
  tags: [container.mesos_manager, mesos_manager]
  when: "'contrail-compute' in group_names and cloud_orchestrator == 'mesos'"

- include: storage_ceph_controller.yml
  tags: [container.ceph_controller, ceph_controller]
  when: "'ceph-controller' in group_names"
