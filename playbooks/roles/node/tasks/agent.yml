---
- name: sm_status_report - agent_started                                                                                                                                   
  debug:
    msg: "docker_role_started"

- name: resolve platform specific vars
  include_vars: "{{item}}"
  with_first_found:
    - files:
      - "{{ansible_distribution}}-{{ansible_distribution_release}}.yml"
      - "{{ansible_distribution}}.yml"
      - "{{ansible_os_family}}.yml"
      skip: true

- name: Install kernel headers to compile vrouter module
  package: name="{{ item }}" state=present
  with_items: "{{ kernel_source_packages }}"

- name: Copy vrouter compiler image
  copy:
    src: "{{ docker_image_load_path }}/{{ vrouter_module_compiler_centos7_image_archive }}"
    dest: "/tmp/{{ vrouter_module_compiler_centos7_image_archive }}"
  when:
    - docker_registry is not defined or load_contrail_vrouter_module_compiler_centos7_image is defined
    - ansible_os_family == 'RedHat'

- name: "Load vrouter compiler image"
  docker_image:
    name: vrouter-module-compiler-centos7
    tag: "{{ contrail_version }}"
    timeout: "{{ container_image_load_timeout }}"
    load_path: "/tmp/{{ vrouter_module_compiler_centos7_image_archive }}"
  when:
    - docker_registry is not defined or load_vrouter_module_compiler_centos7_image is defined
    - ansible_os_family == 'RedHat'

- name: "Compile vrouter module"
  docker_container:
    name: vrouter-compiler
    image: "{{ vrouter_compiler_image_centos7 }}"
    privileged: true
    state: started
    tty: true
    pull: "{{ always_pull_image }}"
    detach: true
    cleanup: true
    capabilities:
      - AUDIT_WRITE
    env:
      INSTALL_VROUTER_MODULE: true
    volumes:
      - "/lib/modules:/lib/modules"
      - "/usr/src/kernels:/usr/src/kernels"
  when: external_vrouter_compile and ansible_os_family == 'RedHat'

- name: "Fail if external_vrouter_compile is true and unsupported OS family"
  shell: "echo 'Unsupported OS family for external vrouter compilation {{ ansible_os_family }}';false"
  when: external_vrouter_compile and ansible_os_family != 'RedHat'

- name: Wait till vrouter module is installed
  wait_for: path="/lib/modules/{{ ansible_kernel }}/kernel/net/contrail/vrouter.ko" state=present
  when: external_vrouter_compile and ansible_os_family == 'RedHat'

- name: Copy contrail vrouter agent image
  copy:
    src: "{{ docker_image_load_path }}/{{ contrail_agent_image_archive }}"
    dest: "/tmp/{{ contrail_agent_image_archive }}"
  when: docker_registry is not defined or load_contrail_agent_image is defined

- name: "Load contrail vrouter agent image"
  docker_image:
    name: contrail-agent
    tag: "{{ contrail_version }}"
    timeout: "{{ container_image_load_timeout }}"
    load_path: "/tmp/{{ contrail_agent_image_archive }}"
  when: docker_registry is not defined or load_contrail_agent_image is defined

- name: Configure contrailctl/agent.conf
  include: "../contrailctl/agent/{{ contrailctl_config_mode }}.yml"

# Copy SSL certs to container
- include: copy_ssl_certs.yml

# Create /var/crash dir on host to enable kernel dump
- name: Create /var/crash on host for kernel dump
  file: path=/var/crash state=directory mode=777

- name: Install kernel crashdump
  package: name=linux-crashdump state=present
  when:
    - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Update the grub configuration for ubuntu 16.04
  shell: 'sudo sed -i "s/crashkernel=.*\([ | \"]\)/crashkernel=384M-2G:64M,2G-16G:128M,16G-:256M\1/g" /etc/default/grub.d/kexec-tools.cfg; sudo update-grub'
  when:
    - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - ansible_distribution_version == '16.04'

- name: Update the grub configuration for ubuntu 14.04
  shell: 'sudo sed -i "s/crashkernel=.*\([ | \"]\)/crashkernel=384M-2G:64M,2G-16G:128M,16G-:256M\1/g" /etc/default/grub.d/kexec-tools.cfg; [ -f /etc/default/kdump-tools ] &&      sudo sed -i "s/USE_KDUMP=0/USE_KDUMP=1/" /etc/default/kdump-tools; sudo update-grub'
  when:
    - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - ansible_distribution_version == '14.04'

- name: "Start contrail agent container (non-kubernetes)"
  docker_container:
    name: agent
    image: "{{ agent_image }}"
    privileged: true
    network_mode: host
    state: started
    tty: true
    restart_policy: unless-stopped
    pull: "{{ always_pull_image }}"
    capabilities:
      - AUDIT_WRITE
    volumes: "{{ contrail_agent_volumes }}"
  when: cloud_orchestrator not in ['kubernetes', 'openshift']

# In case of Kubernetes, agent will install cni on the node, for which need
# More directories to be mounted
# /opt/cni/bin:/host/opt_cni_bin - to copy cni binary
# /etc/cni:/host/etc_cni - to copy/create cni config file
# /var/log/contrail/cni:/host/log_cni - just to make sure cni log directory
# created on host
- name: "Start contrail agent container (kubernetes)"
  docker_container:
    name: agent
    image: "{{ agent_image }}"
    privileged: true
    network_mode: host
    state: started
    tty: true
    restart_policy: unless-stopped
    pull: "{{ always_pull_image }}"
    capabilities:
      - AUDIT_WRITE
    volumes:
      - "/lib/modules:/lib/modules"
      - "/usr/src:/usr/src"
      - "{{ contrailctl_config_directory }}:/etc/contrailctl/"
      - "/var/lib/contrail:/var/lib/contrail"
      - "/opt/cni/bin:/host/opt_cni_bin"
      - "/etc/cni:/host/etc_cni"
      - "/var/log/contrail/cni:/host/log_cni"
  when: cloud_orchestrator in ['kubernetes', 'openshift']
