- name: Parse SRIOV configuration
  set_fact:
    sriov_intf_list: "{{ sriov_intf_list + [ item.get('interface') ] }}"
    sriov_physnets_list: "{{ sriov_physnets_list + [ item.get('physnets') | join('%') if item.get('physnets') else '' ] }}"
  when: item
  with_items: "{{ sriov_config_openstack_compute }}"

- name: Create SRIOV config strings
  set_fact:
      sriov_physnets: "{{  sriov_physnets_list | join(',')  if sriov_physnets_list else '' }}"
      sriov_interfaces: "{{  sriov_intf_list | join(',')  if sriov_intf_list else '' }}"

- name: Create /etc/contrail/ctrl-details
  template: src=ctrl-details.j2 dest=/etc/contrail/ctrl-details

- name: Configure nova
  shell: source /etc/contrail/ctrl-details; /opt/contrail/bin/compute-server-setup.sh

# compute-server-setup.sh was not setting up below configs, which caused neutron auth issues while booting a vm
- name: Configure neutron credentials in nova.conf to fix configuration problem by above command
  ini_file: dest={{ nova_conf }} section=neutron option={{ item.key }} value={{ item.value }}  create=yes
  notify: restart nova-compute
  with_dict:
    password: "{{ neutron_password }}"
    project_name: "{{ service_tenant_name }}"
    admin_tenant_name: "{{ service_tenant_name }}"
    auth_url: "{{ keystone_auth_protocol }}://{{ keystone_ip }}:{{ keystone_admin_port }}/"

- name: Configure oslo rabbit hosts in nova.conf to fix configuration problem by compute-server-setup
  ini_file: dest={{ nova_conf }} section=oslo_messaging_rabbit option={{ item.key }} value={{ item.value }}  create=yes
  notify: restart nova-compute
  with_dict:
    rabbit_hosts: "{{ rabbitmq_servers_with_port }}"
    rabbit_password: "{{ rabbitmq_password }}"

# Workaround for bug https://bugs.launchpad.net/juniperopenstack/+bug/1655543
- name: Copy vrouter-port-control from agent container to compute
  shell: docker cp agent:/usr/bin/vrouter-port-control /usr/bin/vrouter-port-control
  args:
    creates: /usr/bin/vrouter-port-control
  when: "'contrail-compute' in group_names and contrail_compute_mode != 'bare_metal'"

- name: Configure qemu
  blockinfile:
    dest: /etc/libvirt/qemu.conf
    block: |
      cgroup_device_acl = [
       "/dev/null", "/dev/full", "/dev/zero",
        "/dev/random", "/dev/urandom",
        "/dev/ptmx", "/dev/kvm", "/dev/kqemu",
        "/dev/rtc", "/dev/hpet","/dev/net/tun",
      ]
  notify: restart libvirt

# Setup live-migration
- include: live_migration_conf.yml
  when: live_migration is defined and live_migration == True and ansible_os_family == 'Debian'

