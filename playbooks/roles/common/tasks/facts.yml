---
- name: Findout if current machine is a container or a machine
  shell: test -f /.dockerenv && echo yes || echo no
  register: running_in_docker_cmd
  tags: register
  always_run: yes
  when: running_in_docker is not defined

- name: "Setting a fact whether the code is running in a docker container or not"
  set_fact: running_in_docker={{ (running_in_docker is defined) | ternary(running_in_docker, running_in_docker_cmd.stdout) }}

# Workaround to avoid failing service startup within the container if the ubuntu 14.04 containers running inside the centos
# as ansible wrongly detect ansible_service_mgr as systemd
- name: Setting fact to override ansible_service_mgr for docker. This is to wrongly detect service manager as systemd when ubuntu container run on top of centos
  set_fact: ansible_service_mgr=upstart
  when: deployment_platform == "docker" and ansible_service_mgr == 'systemd' and not ((ansible_distribution == "CentOS") or ((ansible_distribution == 'Ubuntu') and ansible_distribution_version == '16.04'))

- name: Set kernel_version_installed flag for compute provision to use
  set_fact:
      kernel_version_installed: "{{ansible_kernel.split('-generic')[0]}}"

# This need to be a fact as otherwise hostvars would not have them, unless
# passed from inventory - for some reason hostvars not picking defaults
- name: Setting default for controller_components
  set_fact:
    controller_components: ['config', 'control', 'webui']
  when: controller_components is not defined
