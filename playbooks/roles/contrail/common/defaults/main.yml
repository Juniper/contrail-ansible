---
kernel_upgrade: false
kernel_version: "{{ '4.4.0-116' if ansible_distribution + ansible_distribution_version == 'Ubuntu16.04' else '3.13.0-142' }}"

cloud_orchestrator: openstack
controller_list: ["{{ ansible_default_ipv4.address }}"]
controller_ip: "{{ controller_list[0] }}"
config_server_list: "{{ controller_list }}"
contrail_api_server_list: "{{ config_server_list }}"
controller_nodes: "{{ controller_list | join(',') }}"
config_nodes: "{{ config_server_list | join(',') }}"
analytics_nodes: "{{ anlaytics_list | join(',') }}"
analyticsdb_nodes: "{{ analyticsdb_list | join(',') }}"
compute_nodes: "{{ compute_list | join(',') }}"
webui_nodes: "{{ controller_list | join(',') }}"

ctrl_physical_interface: >-
  {#- set interface of ctrl_data_network if passed -#}
  {%- if ctrl_data_ip is defined -%}
    {%- for iface in ansible_interfaces if hostvars[inventory_hostname]['ansible_' + iface | regex_replace('-', '_')].get('ipv4',{}).get('address', None) == ctrl_data_ip -%}
      {{ iface }}
    {%- endfor -%}
  {%- elif ctrl_data_network is defined -%}
    {%- set ip_in_ctrl_data_network = ansible_all_ipv4_addresses | ipaddr( ctrl_data_network ) -%}
    {%- if ip_in_ctrl_data_network | count > 0 -%}
      {#- Iterate all interfaces on the host and findout the interface that have the IP address-#}
      {%- for iface in ansible_interfaces if hostvars[inventory_hostname]['ansible_' + iface | regex_replace('-', '_')].get('ipv4',{}).get('address', None) == ip_in_ctrl_data_network |first -%}
        {{ iface }}
      {%- endfor -%}
    {#- No ip found on host from the network ctrl_data_network-#}
    {%- else -%}{{ ansible_default_ipv4.interface }}{%- endif -%}
  {#- set interface with default gateway -#}
  {%- else -%}{{ ansible_default_ipv4.interface }}{%- endif -%}

# Analytics dB defaults
analyticsdb_list: "{{ controller_list }}"
analyticsdb_port: 9160
analyticsdb_cql_port: 9042
# external_configdb_servers - are list of rabbitmq servers managed externally
external_configdb_servers: ""
# external_configdb_servers to be used as configdb_server_list if it is set
configdb_server_list: "{{ external_configdb_servers.split(',') if external_configdb_servers != '' else config_server_list }}"
configdb_port: 9161
configdb_cql_port: 9041
configdb_rmi_port: 7198
configdb_storage_port: 7010
configdb_ssl_storage_port: 7011

# List of zookeeper servers
# external_zookeeper_servers - are list of zookeeper servers managed externally
external_zookeeper_servers: ""
zk_server_list: "{{ external_zookeeper_servers.split(',') if external_zookeeper_servers != '' else config_server_list }}"
zk_port: 2181

# List of rabbitmq servers
# external_rabbitmq_servers - are list of rabbitmq servers managed externally
external_rabbitmq_servers: ""
# external_rabbitmq_servers to be used as rabbitmq_server_list if it is set
rabbitmq_server_list: "{{ external_rabbitmq_servers.split(',') if external_rabbitmq_servers != '' else config_server_list }}"
rabbitmq_port: 5672
rabbitmq_user: "{{ rabbitmq_config.get('user','guest') if rabbitmq_config else 'guest' }}"
rabbitmq_password: "{{ rabbitmq_config.get('password','guest') if rabbitmq_config else 'guest' }}"

config_ip: "{{ controller_ip }}"
api_server_ip: "{{ config_ip }}"
api_server_port: 8082
apiserver_auth_protocol: "{{ global_config.get('apiserver_auth_protocol','http') }}"
region: RegionOne
api_server_admin_port: 8095

# Analytics defaults
# Analytics node list, defaults to controller node list.
analytics_list: "{{ controller_list }}"
contrail_analytics_api_list: "{{ analytics_list }}"
analytics_ip: "{{ controller_ip }}"
analytics_server_ip: "{{ analytics_ip }}"
analytics_server_port: 8081
analytics_server_use_ssl: False

analytics_collector_port: 8086

kafka_broker_list: "{{ analyticsdb_list }}"
kafka_port: 9092

# Control node configs
control_node_list: "{{ controller_list }}"
controlnode_ip: "{{ controller_ip }}"
control_ip: "{{ controlnode_ip }}"
control_xmpp_port: 5269
control_dns_port: 53
# Common log level and log_local
log_level: SYS_NOTICE
log_local: 1

# Redis Config
# Note: All apps used to connect redis server running on local machine, so redis_server_ip is not required, and
#  it should default to localhost
redis_server_ip: 127.0.0.1
redis_server_port: 6379

# Keystone defaults
keystone_version: v2.0
keystone_ip: "{{ controller_ip }}"
keystone_admin_port: 35357
keystone_public_port: 5000
keystone_auth_protocol: http
keystone_admin_user: admin
keystone_admin_password: admin
keystone_admin_tenant: admin

neutron_metadata_ip: "{{ keystone_ip }}"
neutron_metadata_port: 8775
provision_cmd_keystone_args: " --admin_user {{ keystone_admin_user }} --admin_password {{ keystone_admin_password }} --admin_tenant_name {{ keystone_admin_tenant }} "
service_tenant_name: services
# Vnc api client input file
vncapi_conf: "/etc/contrail/vnc_api_lib.ini"

systemd_wants_files: []
apt_update: true

openstack_sku: 'newton'
